{{- if .Values.apiGateway.enabled }}
{{- $serviceValues := dict "name" "api-gw" "group" "gateway" "root" . "values" .Values.apiGateway -}}
{{- include "common.service" $serviceValues }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "app.fullname" . }}-gateway-api-gw-config
  labels:
    {{- include "app.labels" . | nindent 4 }}
    app.kubernetes.io/component: api-gw
    app.kubernetes.io/group: gateway
data:
  nginx.conf: |
    server {
        listen 8080 default_server;
        server_name _;

        client_max_body_size 100M;
        client_body_timeout 120s;

        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 10m;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        error_page 500 501 502 503 504 = @error5xx;

        location = /api {
            default_type application/json;
            return 200 '{"message": "API root. Please use a specific endpoint."}';
        }

        location /api/ {
            location /api/files {
                proxy_pass http://{{ include "app.fullname" . }}-backend-indexing:8001/files;
            }

            location /api/search {
                proxy_pass http://{{ include "app.fullname" . }}-backend-query:8002/search;
            }

            location = /api/health {
                return 200 '{"status": "ok"}';
            }

            default_type application/json;
            return 200 '{"message": "API root or non-existent endpoint. Please use a specific, valid endpoint."}';
        }

        location / {
            proxy_pass http://{{ include "app.fullname" . }}-frontend:3000/;
        }

        location @error5xx {
            default_type application/json;
            return 500 '{"error": "Internal Server Error", "status": 500}';
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}-gateway-api-gw
  labels:
    {{- include "app.labels" . | nindent 4 }}
    app.kubernetes.io/component: api-gw
    app.kubernetes.io/group: gateway
spec:
  replicas: {{ .Values.apiGateway.replicas }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api-gw
      app.kubernetes.io/group: gateway
  template:
    metadata:
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api-gw
        app.kubernetes.io/group: gateway
    spec:
      containers:
      - name: nginx
        image: "{{ .Values.apiGateway.image.registryPath }}/{{ .Values.apiGateway.image.imageName }}:{{ .Values.apiGateway.image.tag }}"
        ports:
          {{- if .Values.apiGateway.service.ports }}
          - name: {{ (index .Values.apiGateway.service.ports 0).name | default "http" }}
            containerPort: {{ (index .Values.apiGateway.service.ports 0).targetPort | default (index .Values.apiGateway.service.ports 0).port }}
          {{- else }}
          - name: http
            containerPort: {{ .Values.apiGateway.service.targetPort | default .Values.apiGateway.service.port }}
          {{- end }}
        volumeMounts:
          - name: config
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: nginx.conf
            readOnly: true
        resources:
          {{- toYaml .Values.apiGateway.resources | nindent 10 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "app.fullname" . }}-gateway-api-gw-config
{{- end }}
