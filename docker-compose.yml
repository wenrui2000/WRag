services:
  nginx:
    platform: linux/amd64
    image: nginx:alpine
    ports:
      - "9090:8080"
    volumes:
      - ./nginx/nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      indexing_service:
        condition: service_healthy
      query_service:
        condition: service_healthy
      frontend:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      qdrant:
        condition: service_started
    restart: on-failure

  indexing_service:
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: Dockerfile.indexing
    ports:
      - "8001:8001"
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - file-storage:/app/files
      - ./backend/src/pipelines:/app/pipelines
      - ./config.yml:/app/config.yml
    depends_on:
      elasticsearch:
        condition: service_healthy
      ollama:
        condition: service_started
      qdrant:
        condition: service_started
      mysql:
        condition: service_healthy
      jaeger:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/health" ]
      interval: 10s
      timeout: 5s
      retries: 18
      start_period: 30s

  query_service:
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: Dockerfile.query
    ports:
      - "8002:8002"
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - file-storage:/app/files
      - ./backend/src/pipelines:/app/pipelines
      - ./config.yml:/app/config.yml
    depends_on:
      elasticsearch:
        condition: service_healthy
      ollama:
        condition: service_started
      qdrant:
        condition: service_started
      mysql:
        condition: service_healthy
      jaeger:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8002/health" ]
      interval: 10s
      timeout: 5s
      retries: 18
      start_period: 30s

  frontend:
    platform: linux/amd64
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_WRAG_API_URL=${WRAG_API_URL:-/api}
    ports:
      - "3000:3000"
    volumes:
      - ./nginx/nginx-frontend.conf:/etc/nginx/conf.d/default.conf:ro
    restart: on-failure

  elasticsearch:
    image: elasticsearch:8.12.1
    platform: linux/amd64
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9201:9200"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    platform: linux/amd64
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=wrag
      - MYSQL_USER=wrag
      - MYSQL_PASSWORD=wrag
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kibana:
    image: kibana:8.12.1
    platform: linux/amd64
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_ORIGINS=*
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]
              count: all
              driver: nvidia

  qdrant:
    image: qdrant/qdrant:v1.13.2
    volumes:
      - qdrant-data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT_ALLOW_RECOVERY_MODE=true
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # UI
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "6831:6831/udp" # Jaeger thrift
      - "6832:6832/udp" # Jaeger thrift compact
      - "5778:5778" # Agent serving configs
      - "14268:14268" # Jaeger HTTP
      - "14250:14250" # Jaeger gRPC
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - SAMPLING_STRATEGIES_FILE=/etc/jaeger/sampling_strategies.json
    volumes:
      - ./jaeger-sampling.json:/etc/jaeger/sampling_strategies.json
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:16686" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  prometheus:
    image: prom/prometheus:v2.48.1
    ports:
      - "9091:9090" # Prometheus UI (External:Internal)
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:9090/-/healthy" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  grafana:
    image: grafana/grafana:10.2.3
    ports:
      - "3001:3000" # Grafana UI (External:Internal)
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  default:
    name: wrag-app

volumes:
  elasticsearch-data:
  file-storage:
  ollama_data:
  qdrant-data:
  mysql-data:
  prometheus-data:
  grafana-data:
